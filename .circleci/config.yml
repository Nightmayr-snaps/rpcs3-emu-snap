version: 2
jobs:
  build:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: Install Build dependencies
          command: |
            sudo apt update
            sudo apt install -y jq
            sudo apt install -y moreutils
            sudo snap install yq
            # sudo snap install snapcraft --classic
            # sudo snap install lxd
            # sudo /snap/bin/lxd.migrate -yes
            # sudo /snap/bin/lxd waitready
            # sudo /snap/bin/lxd init --auto
      - run: 
          name: Version check
          command: |
            LATEST_VERSION_TAG="$(curl https://api.github.com/repos/RPCS3/rpcs3-binaries-linux/releases/latest -s | jq .tag_name -r)"
            CURRENT_VERSION_SNAP="$(snap info rpcs3-emu | grep edge | head -n 2 | tail -n 1 | awk -F ' ' '{print $2}')"
            LATEST_VERSION_COMMIT=${LATEST_VERSION_TAG#build-}
            LATEST_APPIMAGE="$(curl https://api.github.com/repos/RPCS3/rpcs3-binaries-linux/releases/latest -s | jq .assets[].name -r)"
            LATEST_VERSION_TEMP=${LATEST_APPIMAGE#rpcs3-v}
            LATEST_VERSION=${LATEST_VERSION_TEMP%-*}

            # compare versions
            if [ $CURRENT_VERSION_SNAP != $LATEST_VERSION ]; then
                echo "versions don't match, github: $LATEST_VERSION snap: $CURRENT_VERSION_SNAP"
                echo "updating rpcs3 source commit"
                yq w -i snap/snapcraft.yaml parts.rpcs3.source-commit $LATEST_VERSION_COMMIT
                echo 'export BUILD="true"' >> $BASH_ENV
                echo "export LATEST_VERSION=$LATEST_VERSION" >> $BASH_ENV
                echo "export LATEST_VERSION_COMMIT=$LATEST_VERSION_COMMIT" >> $BASH_ENV
                echo "export CURRENT_VERSION_SNAP=$CURRENT_VERSION_SNAP" >> $BASH_ENV
            else
                echo "versions match, github: $LATEST_VERSION snap: $CURRENT_VERSION_SNAP"
                echo 'export BUILD="false"' >> $BASH_ENV
            fi
      - run:
          name: Versions match - Cancel
          command: |
            if [ ${BUILD} == false ]; then
              circleci-agent step halt
            fi
      - run:
          name: Snap build
          command: |
            sudo snapcraft --use-lxd --enable-experimental-package-repositories
      - run:
          name: Snap Test
          command: |
            sudo snap install *.snap --dangerous
            snap run rpcs3-emu.rpcs3 --version
      - persist_to_workspace:
            root: ./
            paths:
                - "./"
      # - run:
      #     name:
      # - store_artifacts: # See circleci.com/docs/2.0/artifacts/ for more details.
      #     path: "*.snap"
  publish:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Publish dependencies
          command: |
            sudo apt update
            sudo apt install -y jq
            sudo apt install -y moreutils
      - run:
          name: "Publish to Snap Store"
          command: |
            mkdir .snapcraft
            echo $SNAP_STORE_LOGIN | base64 --decode --ignore-garbage > .snapcraft/store-login.txt
            snapcraft login --with .snapcraft/store-login.txt
            snapcraft upload *.snap --release edge
            rm -rf .snapcraft
      - run:
          name: Updating versions.json
          command:  |
            export BUILT_SNAP_VERSION="$(ls *.snap | cut -f2 -d '_')"
            echo $BUILT_SNAP_VERSION
            cat versions.json | jq ".edge = \"$BUILT_SNAP_VERSION\"" | sponge versions.json
            git config --global user.name 'Nightmayr'
            git config --global user.email 'umayr23@gmail.com'
            git commit -am "Updating version [ci skip]"
            git push -q https://${GITHUB_PAT}@github.com/Nightmayr-snaps/rpcs3-snap.git master

workflows:
  version: 2

  build-and-publish:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - publish:
          requires:
            - build
          filters:
            branches:
              only: master

  build-and-publish-cron:
    triggers:
      - schedule:
          cron: "0 0,5,10,15,20 * * *"
          filters:
            branches:
              only: master
    jobs:
      - build
      - publish:
          requires:
            - build
  
  build:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
  