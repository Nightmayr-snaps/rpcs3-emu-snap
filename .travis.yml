language: bash
dist: bionic

env:
  global:
    # - BUILD: false
    - LC_ALL: C.UTF-8
    - LANG: C.UTF-8
    - SNAPCRAFT_ENABLE_SILENT_REPORT: y
    - SNAPCRAFT_ENABLE_DEVELOPER_DEBUG: y

# before_install:
#   - sudo apt-get -y install jq
addons:
  snaps:
    - name: snapcraft
      channel: stable
      classic: true
    - name: lxd
      channel: stable
    - name: yq
      channel: stable
  apt:
    packages:
      - jq
    update: true

# jobs:
#   include:
#       - stage: "Set up Snapcraft"
#         name: "Snapcraft"
#         script:
#           - sudo apt update
#           - sudo /snap/bin/lxd.migrate -yes
#           - sudo /snap/bin/lxd waitready
#           - sudo /snap/bin/lxd init --auto
#           - mkdir -p "$TRAVIS_BUILD_DIR/snaps-cache"
#       - stage: "Version check"
#         name: "version check"
#         script: ./.github/scripts/version2.sh
#         # script:
#         #   - LATEST_VERSION_TAG="$(curl https://api.github.com/repos/RPCS3/rpcs3-binaries-linux/releases/latest -s | jq .tag_name -r)"
#         #   - CURRENT_VERSION_SNAP="$(snap info rpcs3-emu | grep edge | head -n 2 | tail -n 1 | awk -F ' ' '{print $2}')"
#         #   - LATEST_VERSION_COMMIT=${LATEST_VERSION_TAG#build-}
#         #   - LATEST_VERSION="$(curl https://api.github.com/repos/RPCS3/rpcs3-binaries-linux/releases/latest -s | jq .name -r)"
#         #   - if [ $CURRENT_VERSION_SNAP != $LATEST_VERSION ]; then
#         #         echo "versions don't match, github: $LATEST_VERSION snap: $CURRENT_VERSION_SNAP"
#         #         echo "updating rpcs3 source commit"
#         #         yq w -i snap/snapcraft.yaml parts.rpcs3.source-commit $LATEST_VERSION_COMMIT
#         #         export BUILD="true"
#         #         export $LATEST_VERSION
#         #         export $LATEST_VERSION_COMMIT
#         #         export $CURRENT_VERSION_SNAP
#         #     else
#         #         echo "versions match, github: $LATEST_VERSION snap: $CURRENT_VERSION_SNAP"
#         #         export BUILD="false"
#         #     fi
#       - stage: "Build"
#         if: ${BUILD}=true
#         name: "Snapcraft build"
#         script:
#           - sudo snapcraft --use-lxd --enable-experimental-package-repositories
#       - stage: "Update"
#         if: env(BUILD)=true
#         name: "update versions.json"
#         script:
#           - cat versions.json
#           - cat versions.json | jq '.edge = "${LATEST_VERSION}"' | sponge versions.json
#           - cat versions.json

before_script: 
  - ./.github/scripts/version2.sh
  
script: 
  - sudo apt update
  - sudo /snap/bin/lxd.migrate -yes
  - sudo /snap/bin/lxd waitready
  - sudo /snap/bin/lxd init --auto
  - mkdir -p "$TRAVIS_BUILD_DIR/snaps-cache"
  - echo $BUILD
  - echo ${BUILD}
  - if [ $BUILD == true ]; then sudo snapcraft --use-lxd --enable-experimental-package-repositories; else exit 1; fi
  - cat versions.json | jq '.edge = "${LATEST_VERSION}"' | sponge versions.json
  - cat versions.json
# script:
#   - sudo apt update
#   - sudo /snap/bin/lxd.migrate -yes
#   - sudo /snap/bin/lxd waitready
#   - sudo /snap/bin/lxd init --auto
#   - mkdir -p "$TRAVIS_BUILD_DIR/snaps-cache"
#   - sudo snapcraft --use-lxd
# after_success:
#   - cp *.snap "$(echo "$TRAVIS_REPO_SLUG" | sed -e 's|.*/\(.*\)|\1|')-pr$TRAVIS_PULL_REQUEST.snap"
#   - timeout 180 /snap/bin/transfer "$(echo "$TRAVIS_REPO_SLUG" | sed -e 's|.*/\(.*\)|\1|')-pr$TRAVIS_PULL_REQUEST.snap"
# after_failure:
#   - sudo journalctl -u snapd
#   - http https://api.snapcraft.io/v2/snaps/info/core architecture==amd64 Snap-Device-Series:16